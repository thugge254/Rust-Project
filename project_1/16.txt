use stdenv;
use stdfsFile;
use stdio{self, BufRead};
use stdpathPath;

const GRID_SIZE usize = 30;


type Grid = VecVecchar;

fn initialize_grid(size usize) - Grid {
    vec![vec![' '; size]; size]
}

fn read_words(filename &str) - ioResultVecString {
    let path = Pathnew(filename);
    let file = Fileopen(&path);
    let reader = ioBufReadernew(file);

    let mut words = Vecnew();

    for line in reader.lines() {
        let line = line;
        let word = line.trim().to_lowercase();

         Only add words with alphabetic characters
        if word.chars().all(c c.is_alphabetic()) {
            words.push(word);
        }
    }

    Ok(words)
}

fn place_word(grid &mut Grid, word &str, row &mut usize, col &mut usize, vertical &mut bool) - bool {
    let chars Vecchar = word.chars().collect();
    let len = chars.len();

    if vertical {
        if row + len  GRID_SIZE {
            return false;  Check bounds
        }
        for i in 0..len {
            if grid[row + i][col] != ' ' && grid[row + i][col] != chars[i] {
                return false;  Conflict
            }
        }
        for i in 0..len {
            grid[row + i][col] = chars[i];
        }
    } else {
        if col + len  GRID_SIZE {
            return false;
        }
        for i in 0..len {
            if grid[row][col + i] != ' ' && grid[row][col + i] != chars[i] {
                return false;
            }
        }
        for i in 0..len {
            grid[row][col + i] = chars[i];
        }
    }
    
     Move position forward slightly for compactness
    if vertical {
        row += 1;
    } else {
        col += 1;
    }
    
    vertical = !vertical;  Alternate direction for better compactness
    true
}

fn print_grid(grid &Grid) {
    for row in grid {
        println!({}, row.iter().collectString());
    }
}

fn calculate_compactness(grid &Grid) - usize {
    let mut min_row = GRID_SIZE;
    let mut max_row = 0;
    let mut min_col = GRID_SIZE;
    let mut max_col = 0;

    for (r, row) in grid.iter().enumerate() {
        for (c, &ch) in row.iter().enumerate() {
            if ch != ' ' {
                if r  min_row {
                    min_row = r;
                }
                if r  max_row {
                    max_row = r;
                }
                if c  min_col {
                    min_col = c;
                }
                if c  max_col {
                    max_col = c;
                }
            }
        }
    }

    if min_row  max_row  min_col  max_col {
        return 0;  No words placed
    }

    (max_row - min_row + 1)  (max_col - min_col + 1)
}

fn main() {
    let args VecString = envargs().collect();
    if args.len()  2 {
        eprintln!(Usage {} filename, args[0]);
        return;
    }

    let filename = &args[1];
    let words = match read_words(filename) {
        Ok(words) = words,
        Err(e) = {
            eprintln!(Error reading file {}, e);
            return;
        }
    };

    if words.is_empty() {
        eprintln!(No valid words found in the file.);
        return;
    }

    let mut grid = initialize_grid(GRID_SIZE);
    let mut row = 3;
    let mut col = 3;
    let mut vertical = false;

    for word in words {
        if !place_word(&mut grid, &word, &mut row, &mut col, &mut vertical) {
            eprintln!(Could not place word {}, word);
        }
    }

    print_grid(&grid);
    let compactness = calculate_compactness(&grid);
    println!(Compactness Score {}, compactness);
}
