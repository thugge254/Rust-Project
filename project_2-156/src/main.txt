use std::env; // Import the environment module to read command-line arguments
use std::fs::File; // Import the File module to enable opening the file
use std::io::{self, BufRead}; // Import the io module for input and output operations. Import BufRead module for reading lines from a file efficiently
use std::path::Path; // Import the Path module. This module provides functionality for working with file and directory paths in a platform-independent way.

const GRID_SIZE: usize = 15; // grid size 

type Grid = Vec<Vec<char>>;

fn initialize_grid(size: usize) -> Grid {
    vec![vec![' '; size]; size]
}

fn read_words(filename: &str) -> io::Result<Vec<String>> {
    let file = File::open(Path::new(filename))?;
    let reader = io::BufReader::new(file);
    reader.lines().map(|line| Ok(line?.split_whitespace().next().unwrap_or("").to_lowercase())).collect()
}

fn place_word(grid: &mut Grid, word: &str, row: usize, col: usize, vertical: bool) -> bool {
    let chars: Vec<char> = word.chars().collect();
    let len = chars.len();

    if vertical {
        if row + len > GRID_SIZE {
            return false;
        }
        for i in 0..len {
            if grid[row + i][col] != ' ' && grid[row + i][col] != chars[i] {
                return false;
            }
        }
        for i in 0..len {
            grid[row + i][col] = chars[i];
        }
    } else {
        if col + len > GRID_SIZE {
            return false;
        }
        for i in 0..len {
            if grid[row][col + i] != ' ' && grid[row][col + i] != chars[i] {
                return false;
            }
        }
        for i in 0..len {
            grid[row][col + i] = chars[i];
        }
    }
    true
}

fn print_grid(grid: &Grid) {
    for row in grid {
        println!("{}", row.iter().collect::<String>());
    }
}

fn calculate_compactness(grid: &Grid) -> usize {
    let mut min_row = GRID_SIZE;
    let mut max_row = 0;
    let mut min_col = GRID_SIZE;
    let mut max_col = 0;

    for (r, row) in grid.iter().enumerate() {
        for (c, &ch) in row.iter().enumerate() {
            if ch != ' ' {
                min_row = min_row.min(r);
                max_row = max_row.max(r);
                min_col = min_col.min(c);
                max_col = max_col.max(c);
            }
        }
    }

    if min_row > max_row || min_col > max_col {
        return 0;
    }

    (max_row - min_row + 1) * (max_col - min_col + 1)
}

fn main() {
    let args: Vec<String> = env::args().collect();
    if args.len() < 2 {
        eprintln!("Usage: {} <filename>", args[0]);
        return;
    }

    let filename = &args[1];
    let words = match read_words(filename) {
        Ok(words) => words,
        Err(e) => {
            eprintln!("Error reading file: {}", e);
            return;
        }
    };
    
    let mut grid = initialize_grid(GRID_SIZE);
    let mut row = 3;
    let mut col = 3;
    let mut vertical = false;

    for word in words {
        if !place_word(&mut grid, &word, row, col, vertical) {
            eprintln!("Could not place word: {}", word);
        }
        vertical = !vertical;
        row = (row + 1) % (GRID_SIZE - 5);
        col = (col + 1) % (GRID_SIZE - 5);
    }
    
    print_grid(&grid);
    let compactness = calculate_compactness(&grid);
    println!("Compactness Score: {}", compactness);
}
